{
  "version": 3,
  "sources": ["../../preact/src/util.js", "../../preact/src/options.js", "../../preact/src/create-element.js", "../../preact/src/component.js", "../../preact/src/create-context.js", "../../preact/src/constants.js", "../../preact/src/diff/children.js", "../../preact/src/diff/props.js", "../../preact/src/diff/index.js", "../../preact/src/render.js", "../../preact/src/clone-element.js", "../../preact/src/diff/catch-error.js"],
  "sourcesContent": ["import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [],\n\t\t\trefQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\tcommitRoot(commitQueue, vnode, refQueue);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {import('./internal').Component} a\n * @param {import('./internal').Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {import('./internal').Component[]} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { isArray } from '../util';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {Array<any>} refQueue an array of elements needed to invoke refs\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet i,\n\t\tj,\n\t\toldVNode,\n\t\tchildVNode,\n\t\tnewDom,\n\t\tfirstChildDom,\n\t\tskew = 0;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length,\n\t\tremainingOldChildren = oldChildrenLength,\n\t\tnewChildrenLength = renderResult.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\toldVNode = oldChildren[i];\n\t\t\tif (oldVNode && oldVNode.key == null && oldVNode._dom) {\n\t\t\t\tif (oldVNode._dom == oldDom) {\n\t\t\t\t\toldDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\n\t\t\t\tunmount(oldVNode, oldVNode, false);\n\t\t\t\toldChildren[i] = null;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\tlet skewedIndex = i + skew;\n\t\tconst matchingIndex = findMatchingIndex(\n\t\t\tchildVNode,\n\t\t\toldChildren,\n\t\t\tskewedIndex,\n\t\t\tremainingOldChildren\n\t\t);\n\n\t\tif (matchingIndex === -1) {\n\t\t\toldVNode = EMPTY_OBJ;\n\t\t} else {\n\t\t\toldVNode = oldChildren[matchingIndex] || EMPTY_OBJ;\n\t\t\toldChildren[matchingIndex] = undefined;\n\t\t\tremainingOldChildren--;\n\t\t}\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (oldVNode.ref) {\n\t\t\t\tapplyRef(oldVNode.ref, null, childVNode);\n\t\t\t}\n\t\t\trefQueue.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tlet isMounting = oldVNode === EMPTY_OBJ || oldVNode._original === null;\n\t\t\tif (isMounting) {\n\t\t\t\tif (matchingIndex == -1) {\n\t\t\t\t\tskew--;\n\t\t\t\t}\n\t\t\t} else if (matchingIndex !== skewedIndex) {\n\t\t\t\tif (matchingIndex === skewedIndex + 1) {\n\t\t\t\t\tskew++;\n\t\t\t\t} else if (matchingIndex > skewedIndex) {\n\t\t\t\t\tif (remainingOldChildren > newChildrenLength - skewedIndex) {\n\t\t\t\t\t\tskew += matchingIndex - skewedIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ### Change from keyed: I think this was missing from the algo...\n\t\t\t\t\t\tskew--;\n\t\t\t\t\t}\n\t\t\t\t} else if (matchingIndex < skewedIndex) {\n\t\t\t\t\tif (matchingIndex == skewedIndex - 1) {\n\t\t\t\t\t\tskew = matchingIndex - skewedIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tskew = 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tskew = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tskewedIndex = i + skew;\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\t(matchingIndex !== skewedIndex ||\n\t\t\t\t\toldVNode._children === childVNode._children)\n\t\t\t) {\n\t\t\t\toldDom = reorderChildren(childVNode, oldDom, parentDom);\n\t\t\t} else if (\n\t\t\t\ttypeof childVNode.type != 'function' &&\n\t\t\t\t(matchingIndex !== skewedIndex || isMounting)\n\t\t\t) {\n\t\t\t\toldDom = placeChild(parentDom, newDom, oldDom);\n\t\t\t} else if (childVNode._nextDom !== undefined) {\n\t\t\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t\t\t// of last DOM child of this child VNode\n\t\t\t\toldDom = childVNode._nextDom;\n\n\t\t\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t\t\t// can clean up the property\n\t\t\t\tchildVNode._nextDom = undefined;\n\t\t\t} else {\n\t\t\t\toldDom = newDom.nextSibling;\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\n\t\t\t\tnewParentVNode._nextDom = oldChildren[i]._dom.nextSibling;\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(parentDom, vnode._dom, oldDom);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(parentDom, newDom, oldDom) {\n\tif (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\tparentDom.insertBefore(newDom, null);\n\t} else if (newDom != oldDom || newDom.parentNode == null) {\n\t\tparentDom.insertBefore(newDom, oldDom);\n\t}\n\n\treturn newDom.nextSibling;\n}\n\n/**\n * @param {import('../internal').VNode | string} childVNode\n * @param {import('../internal').VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(\n\tchildVNode,\n\toldChildren,\n\tskewedIndex,\n\tremainingOldChildren\n) {\n\tconst key = childVNode.key;\n\tconst type = childVNode.type;\n\tlet x = skewedIndex - 1;\n\tlet y = skewedIndex + 1;\n\tlet oldVNode = oldChildren[skewedIndex];\n\n\tif (\n\t\toldVNode === null ||\n\t\t(oldVNode && key == oldVNode.key && type === oldVNode.type)\n\t) {\n\t\treturn skewedIndex;\n\t} else if (remainingOldChildren > (oldVNode != null ? 1 : 0)) {\n\t\twhile (x >= 0 || y < oldChildren.length) {\n\t\t\tif (x >= 0) {\n\t\t\t\toldVNode = oldChildren[x];\n\t\t\t\tif (oldVNode && key == oldVNode.key && type === oldVNode.type) {\n\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t\tx--;\n\t\t\t}\n\n\t\t\tif (y < oldChildren.length) {\n\t\t\t\toldVNode = oldChildren[y];\n\t\t\t\tif (oldVNode && key == oldVNode.key && type === oldVNode.type) {\n\t\t\t\t\treturn y;\n\t\t\t\t}\n\t\t\t\ty++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/(PointerCapture)$|Capture$/, '$1'));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname !== 'rowSpan' &&\n\t\t\tname !== 'colSpan' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {Array<any>} refQueue an array of elements needed to invoke refs\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\touter: if (typeof newType == 'function') {\n\t\ttry {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!c._force &&\n\t\t\t\t\t((c.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\t\tnewVNode._original === oldVNode._original)\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\t\t\tc._force = false;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnewVNode._original = null;\n\t\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\t\tnewVNode._dom = oldDom;\n\t\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t\t// ^ could possibly be simplified to:\n\t\t\t\t// excessDomChildren.length = 0;\n\t\t\t}\n\t\t\toptions._catchError(e, newVNode, oldVNode);\n\t\t}\n\t} else if (\n\t\texcessDomChildren == null &&\n\t\tnewVNode._original === oldVNode._original\n\t) {\n\t\tnewVNode._children = oldVNode._children;\n\t\tnewVNode._dom = oldVNode._dom;\n\t} else {\n\t\tnewVNode._dom = diffElementNodes(\n\t\t\toldVNode._dom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\t}\n\n\tif ((tmp = options.diffed)) tmp(newVNode);\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root, refQueue) {\n\tfor (let i = 0; i < refQueue.length; i++) {\n\t\tapplyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n\t}\n\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {Array<any>} refQueue an array of elements needed to invoke refs\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating,\n\trefQueue\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [],\n\t\trefQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating,\n\t\trefQueue\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n"],
  "mappings": "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",
  "names": ["slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "defer", "depthSort", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "isArray", "Array", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "__h", "constructor", "__v", "createRef", "current", "Fragment", "Component", "context", "this", "getDomSibling", "childIndex", "indexOf", "sibling", "updateParentDomPointers", "child", "base", "enqueueRender", "c", "push", "process", "__r", "debounceRendering", "renderQueueLength", "component", "commitQueue", "refQueue", "oldVNode", "oldDom", "parentDom", "sort", "shift", "__P", "diff", "__n", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "isSvg", "excessDomChildren", "isHydrating", "j", "childVNode", "newDom", "firstChildDom", "skewedIndex", "matchingIndex", "isMounting", "skew", "oldChildren", "oldChildrenLength", "remainingOldChildren", "newChildrenLength", "findMatchingIndex", "applyRef", "nextSibling", "placeChild", "reorderChildren", "unmount", "tmp", "toChildArray", "out", "some", "insertBefore", "x", "y", "diffProps", "dom", "newProps", "oldProps", "hydrate", "setProperty", "setStyle", "style", "value", "test", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "l", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "removeAttribute", "setAttribute", "event", "newVNode", "isNew", "oldState", "snapshot", "clearProcessingException", "provider", "componentContext", "renderHook", "count", "newType", "outer", "contextType", "__E", "prototype", "render", "doRender", "sub", "state", "_sb", "__s", "getDerivedStateFromProps", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "getChildContext", "getSnapshotBeforeUpdate", "diffElementNodes", "diffed", "root", "cb", "oldHtml", "newHtml", "nodeType", "localName", "document", "createTextNode", "createElementNS", "is", "data", "childNodes", "dangerouslySetInnerHTML", "attributes", "__html", "innerHTML", "checked", "parentVNode", "skipRemove", "r", "componentWillUnmount", "replaceNode", "firstChild", "cloneElement", "createContext", "defaultValue", "contextId", "Consumer", "contextValue", "Provider", "subs", "ctx", "_props", "old", "splice", "error", "errorInfo", "ctor", "handled", "getDerivedStateFromError", "setState", "componentDidCatch", "update", "callback", "s", "forceUpdate", "Promise", "then", "bind", "resolve", "setTimeout", "a", "b"]
}
